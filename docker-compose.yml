version: '3.8'

services:
  # Ollama - LLM Server
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    networks:
      tailscale:
        ipv4_address: 100.64.0.101
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped

  # OpenWebUI - Web Interface for Ollama
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    networks:
      tailscale:
        ipv4_address: 100.64.0.102
    volumes:
      - openwebui_data:/app/backend/data
    ports:
      - "8081:8080"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 2G
    environment:
      - OLLAMA_API_BASE_URL=http://100.64.0.101:11434/api
      - VIRTUAL_HOST=chat.bbj4u.xyz
      - LETSENCRYPT_HOST=chat.bbj4u.xyz
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-default_secret}
      # Supabase Database Configuration
      - DATABASE_URL=postgresql://postgres:rGEQ1s1Nl0t6Sdus@db.dwgsdbxkwjoyxywufbgf.supabase.co:5432/postgres
      - SUPABASE_URL=https://dwgsdbxkwjoyxywufbgf.supabase.co
      - SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR3Z3NkYnhrd2pveXh5d3VmYmdmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIyNjc4MzksImV4cCI6MjA2Nzg0MzgzOX0.U2tPb3kU4HFf32U1cjtDCz_jjcwKWGGlr3ImR5gr6DU
    depends_on:
      - ollama
    restart: unless-stopped

  # n8n - Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    networks:
      tailscale:
        ipv4_address: 100.64.0.103
    ports:
      - "8082:5678"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 6G
        reservations:
          cpus: '0.5'
          memory: 4G
    environment:
      - N8N_HOST=n8n.bbj4u.xyz
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_USER_MANAGEMENT_DISABLED=true
      - NODE_ENV=production
      - WEBHOOK_URL=https://n8n.bbj4u.xyz/
      - VIRTUAL_HOST=n8n.bbj4u.xyz
      - LETSENCRYPT_HOST=n8n.bbj4u.xyz
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-changeThisPassword}
      # Supabase Database Configuration for n8n
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db.dwgsdbxkwjoyxywufbgf.supabase.co
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=postgres
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=rGEQ1s1Nl0t6Sdus
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped

  # Minio - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      tailscale:
        ipv4_address: 100.64.0.104
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-changeThisPassword}
      - VIRTUAL_HOST=s3.bbj4u.xyz
      - LETSENCRYPT_HOST=s3.bbj4u.xyz
    command: server --console-address ":9001" /data
    restart: unless-stopped

  # Supabase Backup Service
  supabase-backup:
    image: postgres:15-alpine
    container_name: supabase-backup
    networks:
      - tailscale
    environment:
      - PGHOST=db.dwgsdbxkwjoyxywufbgf.supabase.co
      - PGPORT=5432
      - PGDATABASE=postgres
      - PGUSER=postgres
      - PGPASSWORD=rGEQ1s1Nl0t6Sdus
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - supabase_backups:/backups
      - ./backup-scripts:/scripts
    command: >
      sh -c '
        echo "0 2 * * * pg_dump -h $$PGHOST -p $$PGPORT -U $$PGUSER -d $$PGDATABASE > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql" | crontab - &&
        crond -f
      '
    restart: unless-stopped

  # Adminer - Database Management
  adminer:
    image: adminer:latest
    container_name: adminer
    networks:
      - tailscale
    ports:
      - "8083:8080"
    environment:
      - VIRTUAL_HOST=db.bbj4u.xyz
      - LETSENCRYPT_HOST=db.bbj4u.xyz
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - tailscale
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # MongoDB for Content Storage
  mongodb:
    image: mongo:latest
    container_name: mongodb
    networks:
      - tailscale
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-changeThisPassword}
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      - tailscale
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-changeThisPassword}
    restart: unless-stopped

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - tailscale
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeThisPassword}
      - GF_SERVER_ROOT_URL=https://monitor.bbj4u.xyz
      - VIRTUAL_HOST=monitor.bbj4u.xyz
      - LETSENCRYPT_HOST=monitor.bbj4u.xyz
      # Supabase Database Configuration for Grafana
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=db.dwgsdbxkwjoyxywufbgf.supabase.co:5432
      - GF_DATABASE_NAME=postgres
      - GF_DATABASE_USER=postgres
      - GF_DATABASE_PASSWORD=rGEQ1s1Nl0t6Sdus
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - tailscale
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    environment:
      - VIRTUAL_HOST=metrics.bbj4u.xyz
      - LETSENCRYPT_HOST=metrics.bbj4u.xyz
    restart: unless-stopped

  # Kaggle Notebook with GPU Support
  kaggle-notebook:
    image: gcr.io/kaggle-gpu-images/gpu-jupyter:latest
    container_name: kaggle-notebook
    networks:
      tailscale:
        ipv4_address: 100.64.0.105
    environment:
      - VIRTUAL_HOST=notebook.bbj4u.xyz
      - LETSENCRYPT_HOST=notebook.bbj4u.xyz
      - DOCKER_STACKS_JUPYTERCMD=jupyter-lab
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-changeThisToken}
      # Supabase Database Configuration for Jupyter
      - DATABASE_URL=postgresql://postgres:rGEQ1s1Nl0t6Sdus@db.dwgsdbxkwjoyxywufbgf.supabase.co:5432/postgres
    volumes:
      - kaggle_data:/home/jovyan/work
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

networks:
  tailscale:
    driver: bridge
    attachable: true
    ipam:
      config:
        - subnet: 100.64.0.0/24
          gateway: 100.64.0.1
    labels:
      - com.tailscale.ipn.router=100.64.0.0/24

volumes:
  ollama_data:
  openwebui_data:
  n8n_data:
  minio_data:
  supabase_backups:
  redis_data:
  mongodb_data:
  grafana_data:
  prometheus_data:
  kaggle_data: